from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm import state
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from logs.loger_cfg import logger
from db.CRUD import get_user_by_username, update_lids, update_money, update_ban_status, update_out_money
from db.create_database import get_session

router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É

class RefUser(StatesGroup):
    username = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "refact_profile")
async def edit_profile_command(c: CallbackQuery, state: FSMContext):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(RefUser.username)


@router.message(RefUser.username)
async def process_username(message: types.Message, state: FSMContext):
    await state.clear()
    async with get_session()() as session:
        user = await get_user_by_username(session, message.text)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    text = (f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            f"ID: {user.id}\n\n"
            f"üìä –õ–∏–¥–æ–≤: {user.lids}\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {user.money}\n"
            f"üì§ –í—ã–≤–µ–¥–µ–Ω–æ –¥–µ–Ω–µ–≥: {user.pay_out}\n"
            f"üõ° –ê–¥–º–∏–Ω–∫–∞: {'–î–∞' if user.is_admin else '–ù–µ—Ç'}\n"
            f"üëÅ –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å{'–î–∞' if user.is_private else '–ù–µ—Ç'}\n"
            f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'–î–∞' if user.is_ban else '–ù–µ—Ç'}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë•–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–¥–æ–≤", callback_data=f"edit_lids:{user.id}")
    keyboard.button(text="üí≤–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"edit_money:{user.id}")
    keyboard.button(text="üí±–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data=f"edit_out:{user.id}")
    if not user.is_ban:
        keyboard.button(text="‚ùå–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user:{user.id}")
    else:
        keyboard.button(text="‚úî–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_user:{user.id}")
    keyboard.adjust(2)

    await message.answer(text, reply_markup=keyboard.as_markup())

class ReUsers(StatesGroup):
    id = State()
    lids = State()
    money = State()
    out_money = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data.startswith("edit_lids:"))
async def edit_lids_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:")
    await state.update_data(user_id=user_id)
    await state.set_state(ReUsers.lids)
    await call.answer()


@router.message(ReUsers.lids)
async def process_lids_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return
    async with get_session()() as session:
        await update_lids(session, user_id, int(message.text))
    print(user_id, message.text)
    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–¥—ã –¥–æ {message.text}")
    await state.clear()



#–¥–µ–Ω—å–≥–∏--------------------


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data.startswith("edit_money:"))
async def edit_lids_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
    await state.update_data(user_id=user_id)
    await state.set_state(ReUsers.money)
    await call.answer()


@router.message(ReUsers.money)
async def process_lids_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    async with get_session()() as session:
        await update_money(session, user_id, int(message.text))
    print(user_id, message.text)
    await message.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –¥–æ {message.text}")
    await state.clear()






#/////////////////////////------–¥–ª—è –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–π –¥–µ–Ω–µ–≥


@router.callback_query(F.data.startswith("edit_out:"))
async def edit_lids_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥:")
    await state.update_data(user_id=user_id)
    await state.set_state(ReUsers.out_money)
    await call.answer()


@router.message(ReUsers.out_money)
async def process_lids_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    async with get_session()() as session:
        await update_out_money(session, user_id, int(message.text))
    print(user_id, message.text)
    await message.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –¥–æ {message.text}")
    await state.clear()


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ–ª–∞–µ–º –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–∞–Ω–≥–∞

@router.callback_query(F.data.startswith("block_user:"))
async def block_user_callback(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    async with get_session()() as session:
        await update_ban_status(session, user_id, True)
    await call.message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await call.answer()


@router.callback_query(F.data.startswith("unblock_user:"))
async def unblock_user_callback(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    async with get_session()() as session:
        await update_ban_status(session, user_id, False)
    await call.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await call.answer()

from aiogram import Router, types, F, Bot
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy.ext.asyncio import AsyncSession
from db.CRUD import (get_tickets_by_status, update_ticket_status, get_ticket_by_id, get_session,
                     update_plus_out_money, update_plus_money)
from logs.loger_cfg import logger

money_router = Router()

MenuCallback = CallbackData()

@money_router.callback_query(F.data.startswith("get_money"))
async def open_main_menu(callback: types.CallbackQuery):
    se1 = InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data="menu:history::")
    se2 = InlineKeyboardButton(text="‚åõ –û–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥–∞", callback_data="menu:pending::")
    se3 = InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="main_menu")
    await callback.message.edit_text("üí∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[se1, se2], [se3]]))

@money_router.callback_query(F.data.startswith("menu:history"))
async def open_history_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    b1 = InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="menu:view:‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:")
    b2 = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="menu:view:‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞:")
    b3 = InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="get_money")
    await callback.message.edit_text("üìú –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[b1, b2], [b3]]))


@money_router.callback_query(F.data.startswith("menu:view"))
async def view_tickets(callback: types.CallbackQuery):
    data_parts = callback.data.split(":")
    status = data_parts[2]
    current_page = int(data_parts[3]) if len(data_parts) > 3 and data_parts[3].isdigit() else 1

    async with get_session()() as session:
        all_tickets = await get_tickets_by_status(session, status)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 6
    total_pages = (len(all_tickets) + items_per_page - 1) // items_per_page
    start_idx = (current_page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_tickets = all_tickets[start_idx:end_idx]

    keyboard = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º 6 –≤ —Ä—è–¥)
    for ticket in page_tickets:
        keyboard.button(
            text=f"üìå {ticket.id}",
            callback_data=f"menu:details:{ticket.status}:{ticket.id}"
        )
    keyboard.adjust(6)  # 6 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü)
    if total_pages > 1:
        pagination_row = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        prev_page = max(1, current_page - 1)
        pagination_row.button(
            text="‚óÄÔ∏è" if current_page > 1 else " ",
            callback_data=f"menu:view:{status}:{prev_page}" if current_page > 1 else "no_action"
        )

        # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.button(
            text=f"{current_page}/{total_pages}",
            callback_data="no_action"
        )

        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        next_page = min(total_pages, current_page + 1)
        pagination_row.button(
            text="‚ñ∂Ô∏è" if current_page < total_pages else " ",
            callback_data=f"menu:view:{status}:{next_page}" if current_page < total_pages else "no_action"
        )

        keyboard.attach(pagination_row)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.row(
        types.InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data="menu:history"
        )
    )

    await callback.message.edit_text(
        f"üìã –ó–∞—è–≤–∫–∏ ({status}) - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}:",
        reply_markup=keyboard.as_markup()
    )


@money_router.callback_query(F.data.startswith("menu:details"))
async def view_ticket_details(callback: types.CallbackQuery):
    data_parts = callback.data.split(":")
    async with get_session()() as session:
        ticket = await get_ticket_by_id(session, int(data_parts[3]))
    text = (f"üí≥ –ó–∞—è–≤–∫–∞ #{ticket.id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.id_user}\n"
            f"üí∞ –°—É–º–º–∞: {ticket.money_out}‚ÇΩ\n"
            f"üè¶ –ë–∞–Ω–∫: {ticket.bank}\n"
            f"üî¢ –ö–∞—Ä—Ç–∞: {ticket.card_number}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ticket.commentary}\n"
            f"‚è≥ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {ticket.time_created}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {ticket.status}")

    await callback.message.edit_text(text, reply_markup=callback.message.reply_markup)

@money_router.callback_query(F.data.startswith("menu:pending"))
async def view_pending_tickets(callback: types.CallbackQuery):
    async with get_session()() as session:
        tickets = await get_tickets_by_status(session, "üïê –°–æ–∑–¥–∞–Ω–∞")
    if not tickets:
        await callback.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫", show_alert=True)
        return
    ticket = tickets[0]
    await show_pending_ticket(callback, ticket)

async def show_pending_ticket(callback, ticket):
    text = (f"üí≥ –ó–∞—è–≤–∫–∞ #{ticket.id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.id_user}\n"
            f"üí∞ –°—É–º–º–∞: {ticket.money_out}‚ÇΩ\n"
            f"üè¶ –ë–∞–Ω–∫: {ticket.bank}\n"
            f"üî¢ –ö–∞—Ä—Ç–∞: {ticket.card_number}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ticket.commentary}\n"
            f"‚è≥ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {ticket.time_created}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {ticket.status}")
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"menu:approve:::{ticket.id}")
    keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"menu:reject:::{ticket.id}")
    keyboard.button(text="üîô –í –º–µ–Ω—é", callback_data="get_money")
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())

@money_router.callback_query(F.data.startswith("menu:approve"))
@money_router.callback_query(F.data.startswith("menu:reject"))
async def process_ticket(callback: types.CallbackQuery, bot: Bot):
    print(callback.data.split(":"))
    action, status, _, _,  ticket_id = callback.data.split(":")
    print(action + status)
    new_status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if action + status == "menuapprove" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    logger.info(f"–ó–∞—è–≤–∫–∞ {ticket_id} c–æ —Å—Ç–∞—Ç—É—Å–æ–º {new_status}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é async_sessionmaker

    # –†–∞–±–æ—Ç–∞–µ–º —Å —Å–µ—Å—Å–∏–µ–π –≤ –±–ª–æ–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    async with get_session()() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        await update_ticket_status(session, int(ticket_id), new_status)

        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
        await view_pending_tickets(callback)
    print(new_status, new_status == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

    if new_status == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞":
        print("–í —Ñ—É–Ω–∫—Ü–∏–∏")
        async with get_session()() as session:
            ticket = await get_ticket_by_id(session, int(ticket_id))
            print("ID", callback.from_user.id)
            print("MONEY OUT", ticket.money_out)
            await update_plus_out_money(session, ticket.id_user, ticket.money_out)
            await update_plus_money(session, ticket.id_user, -ticket.money_out)
            await callback.message.answer("–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚úçÔ∏è")
            await bot.send_message(ticket.id_user, f"‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{ticket.id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    else:
        await callback.message.answer("–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω‚úèÔ∏è")
        async with get_session()() as session:
            ticket = await get_ticket_by_id(session, int(ticket_id))
            await bot.send_message(ticket.id_user, f"‚ùå–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{ticket.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞üìå")
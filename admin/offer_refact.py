from aiogram import Router
from aiogram import types, F
from aiogram.fsm import state
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm import state

from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.CRUD import (get_offer_by_id, get_session, get_all_offers, update_offer_name, delete_offer, update_offer_action,
                     update_offer_commentary, get_user_info_by_id)
from admin.keyboard.key_admin import admin_keyboard, offer_keyboard

adm_router_refact = Router()


# –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –æ—Ñ—Ñ–µ—Ä–æ–≤
back_to_offers_button = InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="all_offers_back")



def generate_offers_keyboard(offers, page=0, per_page=20):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
    start_idx = page * per_page
    text = ""
    for offer in offers[start_idx:start_idx + per_page]:
        print("OFFER", offer.id)
        builder.button(
            text=f"{offer.button_name}",
            callback_data=f"adm_offer_details_{offer.id}"
        )
        text += f"{offer.button_name}-{offer.name}-{offer.money}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = (len(offers) + per_page - 1) // per_page
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"adm_offers_page_{page - 1}")
        if page < total_pages - 1:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"adm_offers_page_{page + 1}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm_offer_cancel")

    return builder.adjust(1, 2, 1).as_markup()


@adm_router_refact.callback_query(F.data == "adm_offer_cancel")
async def back_all_offers(c: CallbackQuery):
    await c.message.edit_text(text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)

@adm_router_refact.callback_query(F.data == "adm_offer_search")
async def show_all_offers(c: CallbackQuery):
    async with get_session()() as session:
        all_offers = await get_all_offers(session)

    if not all_offers:
        await c.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤.")
        return

    keyboard= generate_offers_keyboard(all_offers)
    await c.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", reply_markup=keyboard)


@adm_router_refact.callback_query(F.data.startswith("adm_offers_page_"))
async def handle_pagination(c: CallbackQuery):
    page = int(c.data.split("_")[-1])

    async with get_session()() as session:
        all_offers = await get_all_offers(session)

    total_pages = (len(all_offers) + 5) // 6
    if page < 0 or page >= total_pages:
        await c.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return

    keyboard, text = generate_offers_keyboard(all_offers, page)
    await c.message.edit_text(f"üì¶ –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n{text}", reply_markup=keyboard)


@adm_router_refact.callback_query(F.data.startswith("adm_offer_details_"))
async def show_offer_details(c: CallbackQuery):
    offer_id = int(c.data.split("_")[-1])

    async with get_session()() as session:
        offers = await get_offer_by_id(session, offer_id)

    if not offers:
        await c.answer("–û—Ñ—Ñ–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    print(f"OFFER LIST {offers[0].id}")
    offer = offers[0]
    text_all_users = ""
    for id in offer.user_id.split():
        async with get_session()() as session:
            user = await get_user_info_by_id(session, int(id))
            text_all_users += f"@{user.username} "

    response_text = (
        f"üìå –û—Ñ—Ñ–µ—Ä #{offer.id}\n\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {offer.name}\n"
        f"‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {offer.action}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {offer.commentary}\n"
        f"üíµ –¶–µ–Ω–∞: {offer.money}\n"
        f"üåç GEO: {offer.geo}\n\n"
        f"–í—ã–ø–æ–ª–Ω—è—é—Ç {text_all_users}"
    )


    de1 = InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="adm_offer_search")
    de2 = InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–Ω–æ–ø–∫–∏", callback_data=f"create_but_name_{offer_id}")
    de3 = InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¢–µ–∫—Å—Ç", callback_data=f"refact_text_{offer_id}")
    de4 = InlineKeyboardButton(text="‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"refact_description_{offer_id}")
    de5 = InlineKeyboardButton(text="‚Ü©Ô∏è –£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", callback_data=f"delete_offer_{offer_id}")
    refact_keyboard = InlineKeyboardMarkup(inline_keyboard=[[de4, de2], [de3, de5], [de1]])
    print(str(c.message.from_user.id), str(offer.user_id).split(), str(c.message.from_user.id) not in str(offer.user_id).split())
    await c.message.edit_text(response_text, reply_markup=refact_keyboard)

class Rename(StatesGroup):
    id = 0
    name = State()

@adm_router_refact.callback_query(F.data.startswith("create_but_name_"))
async def create_name_offer(c: CallbackQuery, state: FSMContext):
    offer_id = int(c.data.split("_")[-1])
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    await state.set_state(Rename.name)
    await state.update_data(id=offer_id)

@adm_router_refact.message(Rename.name)
async def rename(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    data = await state.get_data()
    await state.clear()
    async with get_session()() as session:
        new_offer = await update_offer_name(session, data["id"], data["name"])
    if new_offer:
        await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=offer_keyboard)


@adm_router_refact.callback_query(F.data.startswith("delete_offer_"))
async def create_name_offer(c: CallbackQuery):
    offer_id = int(c.data.split("_")[-1])
    async with get_session()() as session:
        status = await delete_offer(session, offer_id)
    if status:
        await c.message.answer("–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=offer_keyboard)

class ReText(StatesGroup):
    id = 0
    name = State()

@adm_router_refact.callback_query(F.data.startswith("refact_text_"))
async def create_name_offer(c: CallbackQuery, state: FSMContext):
    offer_id = int(c.data.split("_")[-1])
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    await state.set_state(ReText.name)
    await state.update_data(id=offer_id)

@adm_router_refact.message(ReText.name)
async def rename(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    data = await state.get_data()
    await state.clear()
    async with get_session()() as session:
        new_offer = await update_offer_action(session, data["id"], data["name"])
    if new_offer:
        await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=offer_keyboard)


class ReDescription(StatesGroup):
    id = 0
    name = State()

@adm_router_refact.callback_query(F.data.startswith("refact_description_"))
async def create_name_offer(c: CallbackQuery, state: FSMContext):
    offer_id = int(c.data.split("_")[-1])
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    await state.set_state(ReDescription.name)
    await state.update_data(id=offer_id)

@adm_router_refact.message(ReDescription.name)
async def rename(message: Message, state: FSMContext):
    await state.update_data(name = message.text)
    data = await state.get_data()
    await state.clear()
    async with get_session()() as session:
        new_offer = await update_offer_commentary(session, data["id"], data["name"])
    if new_offer:
        await message.answer("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=offer_keyboard)
from aiogram import Router
from aiogram.fsm import state
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, FSInputFile


from db.CRUD import get_session, get_user_info_by_id, create_ticket, get_tickets_by_user
from logs.loger_cfg import logger


out = Router()

but1 = InlineKeyboardButton(text = "–í—ã–π—Ç–∏ –∏–∑ —Ñ–æ—Ä–º—ã", callback_data="exit_form")

keyword_out_money = InlineKeyboardMarkup(inline_keyboard=[[but1]])

class OutputForm(StatesGroup):
    Summary = State()
    Bank_name = State()
    Card_number = State()
    Commentary = State()




@out.callback_query(lambda c: c.data == "output_money")
async def out_menu(c: CallbackQuery, state: FSMContext):
    user_tickets = await get_tickets_by_user(get_session(), c.from_user.id)

    logger.info("–í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:" ,user_tickets)
    all_status = True
    p = 0
    for i in range(len(user_tickets)):
        if user_tickets[i].status == "üïê –°–æ–∑–¥–∞–Ω–∞":
            all_status = False
            p = i
            break

    if all_status:
        await c.message.answer("–í–≤–µ–¥–∏—Ç–µ c—É–º–º—É –≤ RUB", reply_markup=keyword_out_money)

        await state.set_state(OutputForm.Summary)


    else:
        await c.message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥!\n"
                               f"–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ id:"
                               f" {user_tickets[p].id}\n"
                               f" –°—É–º–º–∞: {user_tickets[p].money_out}\n"
                               f" –°—Ç–∞—Ç—É—Å: {user_tickets[p].status}\n"
                               )


@out.message(OutputForm.Summary)
async def get_name(message: Message, state: FSMContext):
    try:
        await state.update_data(sum=int(message.text))
        async with get_session()() as session:
            user = await get_user_info_by_id(session, message.from_user.id)
            if user.money >= int(message.text):
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞(–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞/–Ω–æ–º–µ—Ä/–∫—Ä–∏–ø—Ç–∞)", reply_markup=keyword_out_money)
                await state.set_state(OutputForm.Bank_name)

            else:
                await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É")

    except Exception as e:
        logger.error(e)
        await message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ")

@out.message(OutputForm.Bank_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(bank=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞/—Å—á–µ—Ç–∞", reply_markup=keyword_out_money)
    await state.set_state(OutputForm.Card_number)

@out.message(OutputForm.Card_number)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(card_num=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤—ã–≤–æ–¥—É", reply_markup=keyword_out_money)
    await state.set_state(OutputForm.Commentary)


@out.message(OutputForm.Commentary)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    data = await state.get_data()
    print(data)
    ticket = await create_ticket(get_session(), message.from_user.id, data['sum'], data['bank'], data["card_num"], data["comment"])
    await message.reply(f"‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ id{ticket.id} –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"‚è≥–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!\n")
    await state.clear()



@out.callback_query(lambda c: c.data == "exit_form")
async def exit_form(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.answer("–í—ã –≤—ã—à–ª–∏, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è /start")








from aiogram import Router, F
from aiogram.types import (PollAnswer, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup,
                           Message, CallbackQuery)


from db.CRUD import get_offers_by_user_id, get_session, get_all_offers, assign_user_to_offer


but1 = InlineKeyboardButton(text = "üîç –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data = "all_offers")
but2 = InlineKeyboardButton(text = "üíº –ú–æ–∏ –æ—Ñ—Ñ–µ—Ä—ã", callback_data = "my_offers")
but3 = InlineKeyboardButton(text = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data= "menu")

project_keyboard = InlineKeyboardMarkup(inline_keyboard = [[but2, but1], [but3]])

offers_rout = Router()

@offers_rout.message(F.text == "üì¶ –û—Ñ—Ñ–µ—Ä—ã")
async def offer(message: Message):
    await message.reply(text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é", reply_markup = project_keyboard)

@offers_rout.callback_query(lambda c: c.data == "my_offers")
async def my_offers(c: CallbackQuery):
    async with get_session()() as session:
        my_offers = await get_offers_by_user_id(session, c.from_user.id)
    if len(my_offers) == 0:
        await c.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤")
    else:
        for offer in my_offers:
            response_text = (
                f"üìå –û—Ñ—Ñ–µ—Ä #{offer.id}\n\n"
                f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {offer.name}\n"
                f"‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {offer.action}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {offer.commentary}\n"
                f"üíµ –¶–µ–Ω–∞: {offer.money}\n"
                f"üåç GEO: {offer.geo}\n\n\n"
                f"üìÖ –°—Å—ã–ª–∫–∞: {offer.url}\n"
            )
            await c.message.answer(response_text)


from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.CRUD import get_offer_by_id  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CRUD

# –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –æ—Ñ—Ñ–µ—Ä–æ–≤
back_to_offers_button = InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="all_offers_back")


def generate_offers_keyboard(offers, page=0, per_page=6):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
    start_idx = page * per_page
    text = ""
    for offer in offers[start_idx:start_idx + per_page]:
        print("OFFER", offer.id)
        builder.button(
            text=f"{offer.button_name}",
            callback_data=f"offer_details_{offer.id}"
        )
        text += f"{offer.button_name}-{offer.name}-{offer.money}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = (len(offers) + per_page - 1) // per_page
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_offers_page_{page - 1}")
        if page < total_pages - 1:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"all_offers_page_{page + 1}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="all_offers_back")

    return builder.adjust(1, 2, 1).as_markup(), text


@offers_rout.callback_query(F.data == "all_offers")
async def show_all_offers(c: CallbackQuery):
    async with get_session()() as session:
        all_offers = await get_all_offers(session)

    if not all_offers:
        await c.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤.")
        return

    keyboard, text = generate_offers_keyboard(all_offers)
    await c.message.edit_text(f" –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):\n{text}", reply_markup=keyboard)


@offers_rout.callback_query(F.data.startswith("all_offers_page_"))
async def handle_pagination(c: CallbackQuery):
    page = int(c.data.split("_")[-1])

    async with get_session()() as session:
        all_offers = await get_all_offers(session)

    total_pages = (len(all_offers) + 5) // 6
    if page < 0 or page >= total_pages:
        await c.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return

    keyboard, text = generate_offers_keyboard(all_offers, page)
    await c.message.edit_text(f"üì¶ –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n{text}", reply_markup=keyboard)


@offers_rout.callback_query(F.data.startswith("offer_details_"))
async def show_offer_details(c: CallbackQuery):
    offer_id = int(c.data.split("_")[-1])

    async with get_session()() as session:
        offers = await get_offer_by_id(session, offer_id)

    if not offers:
        await c.answer("–û—Ñ—Ñ–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    print(f"OFFER LIST {offers[0].id}")
    offer = offers[0]

    response_text = (
        f"üìå –û—Ñ—Ñ–µ—Ä #{offer.id}\n\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {offer.name}\n"
        f"‚öíÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {offer.action}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {offer.commentary}\n"
        f"üíµ –¶–µ–Ω–∞: {offer.money}\n"
        f"üåç GEO: {offer.geo}\n"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="all_offers")
    print(str(c.message.from_user.id), str(offer.user_id).split(), str(c.message.from_user.id) not in str(offer.user_id).split())
    if str(c.from_user.id) not in str(offer.user_id).split():
        builder.button(text="üéØ –í–∑—è—Ç—å –æ—Ñ—Ñ–µ—Ä", callback_data=f"take_offer_{offer.id}")
    await c.message.edit_text(response_text, reply_markup=builder.as_markup())


@offers_rout.callback_query(F.data == "all_offers_back")
async def back_to_offers_menu(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é", reply_markup=project_keyboard)


@offers_rout.callback_query(F.data.startswith("take_offer_"))
async def take_offer(c: CallbackQuery):
    offer_id = int(c.data.split("_")[-1])

    async with get_session()() as session:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ assign_user_to_offer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_id –∏ offer_id
        user_id = c.from_user.id
        print(f"TAKE OFFER {offer_id}")
        result = await assign_user_to_offer(session, offer_id, user_id)

    if result:
        await c.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –æ—Ñ—Ñ–µ—Ä!")
    else:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –æ—Ñ—Ñ–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤
    await c.message.edit_text("üì¶ –í—Å–µ –æ—Ñ—Ñ–µ—Ä—ã", reply_markup=project_keyboard)





